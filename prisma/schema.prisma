generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum EVENT_TYPE {
  EVENT
  FOCUS_TIME
  OUT_OF_OFFICE
  WORKING_LOCATION
  TASK
  APPOINTMENT_SCHEDULE
  MEETING
}
model User {
  id                     String      @id @default(uuid()) @db.Uuid
  refresh_token          String?     @db.VarChar(255)
  email                  String      @unique @db.VarChar(255)
  verified_email         Boolean
  name                   String?     @db.VarChar(255)
  given_name             String?     @db.VarChar(255)
  family_name            String?     @db.VarChar(255)
  picture                String?     @db.VarChar(255)
  hd                     String?     @db.VarChar(255)
  isSync                 Boolean     @default(false)
  calendar_refresh_token String?     @db.VarChar(255)
  indiGroupId            String      @unique @db.Uuid
  messages               Message[]
  indiGroup              Group       @relation(fields: [indiGroupId], references: [id], onDelete: Cascade)
  userGroups             UserGroup[]
}

model Group {
  id          String      @id @default(uuid()) @db.Uuid
  ownerId     String?     @db.Uuid
  name        String      @db.VarChar(255)
  createTime  DateTime    @default(now())
  description String?
  numMember   Int?
  events      Event[]
  User        User?
  userGroups  UserGroup[]
}

model UserGroup {
  user_id  String @db.Uuid
  group_id String @db.Uuid
  Group    Group  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_id])
}

model Event {
  id               String    @id @default(uuid())
  name             String?
  description      String?
  startTime        DateTime?
  endTime          DateTime?
  isRecurring      Boolean?
  isComplete       Boolean?
  type             EVENT_TYPE @default(EVENT)
  reminderTime     Int?
  recurrentPattern String?
  priority         Int?
  group_id         String?   @db.Uuid
  summary          String?
  group            Group?    @relation(fields: [group_id], references: [id], onDelete: Cascade)

  ownerId          String?    @db.Uuid 
}

model Message {
  id         String   @id @db.Uuid
  userId     String?  @db.Uuid
  createTime DateTime @default(now())
  text       String?
  response   String?
  textBot    String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
